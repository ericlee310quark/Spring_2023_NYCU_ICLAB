`include "../00_TESTBED/pseudo_DRAM.sv"
`include "Usertype_OS.sv"

program automatic PATTERN(input clk, INF.PATTERN inf);
import usertype::*;

//================================================================
// parameters & integer
//================================================================

parameter PATTERN_NUM = 800000;
integer i,j;
integer gap;
integer patcount,total_cycles,cnt_out,cycles;
//================================================================
// wire & registers 
//================================================================
// check the input signal 
Error_Msg    golden_err_msg;
logic        golden_complete;
logic [31:0] golden_out_info;



Action act;
User_id user;
logic [7:0] seller;
Shop_Info sell_shop_info, buy_shop_info;
User_Info sell_user_info, buy_user_info;
Item_id item;
Money  money,given_money;
Item_num item_num;
EXP buy_exp;
logic [6:0] d_fee;
logic [1:0]record_act[0:255];//0 is deposit or check or no_use 1 is buy 2 is return 3 is sell
logic [7:0] record_sell_id[0:255];
logic [7:0] record_buy_id[0:255];
logic has_given_id;
logic check_sell;
//======================================
// initial DRAM
//======================================
parameter DRAM_p_r = "../00_TESTBED/DRAM/dram.dat";
logic [7:0] golden_DRAM[((65536+256*8)-1):(65536+0)];
initial $readmemh(DRAM_p_r, golden_DRAM);

class random_id;
    randc User_id ran_id;
    constraint range{
        ran_id inside{[0:255]};
    }
endclass

class random_act; 
    rand Action ran_act;
    constraint range{
        ran_act inside{Buy, Check, Deposit, Return};
    }
endclass

class random_seller_id; 
    rand User_id ran_seller_id;
    constraint range{
        ran_seller_id inside{[0:255]};
    }
endclass

class random_item_id; 
    rand Item_id ran_item_id;
    constraint range{
        ran_item_id inside{Large, Medium, Small};
    }
endclass

class random_num_item; 
    rand Item_num ran_num_item;
    constraint range{
        ran_num_item inside{[1:50]};//1~63
    }
endclass

class random_new_id_or_not;
    rand logic give_id;
    constraint range{
        give_id inside {0,1};
    }    
endclass

class random_deposit;
	rand Money deposit_amt;
	constraint limit { 
        deposit_amt inside {[1:65535]}; 
    }
endclass
random_id            r_id           =   new();
random_act           r_act          =   new();
random_seller_id     r_seller_id    =   new();
random_item_id       r_item_id      =   new();
random_num_item      r_num_item     =   new();
random_new_id_or_not r_give_id      =   new(); 
random_deposit       r_amt          =   new(); 


//================================================================
// initial
//================================================================

initial begin
    inf.rst_n = 1'b1;
    reset_task;
    @(negedge clk);
    for(patcount = 0; patcount < PATTERN_NUM; patcount = patcount + 1) begin
        input_task;
        read_golden_dram_task;
        golden_err_msg_task;
        golden_complete_task;
        golden_out_info_task;
        if(golden_complete == 1) begin
            wait_out_valid_task;
            check_ans_task;
            golden_info_task;
            record_task;
            write_task;
        end
        else begin
            wait_out_valid_task;
            check_ans_task;
        end
        gap = $urandom_range(1,9);
        repeat(gap) @(negedge clk);
    end
    repeat(3)@(negedge clk);
    YOU_PASS_task;
    $finish;
end



task input_task;
    r_give_id.randomize();
    if(patcount == 0)
        has_given_id = 1'b1;
    else
        has_given_id = r_give_id.give_id;;
    if(has_given_id == 1'b1) begin
        r_id.randomize();
        user = r_id.ran_id;
        inf.id_valid = 1'b1;
        inf.D = {8'd0, user};
        repeat(1) @(negedge clk);
        inf.id_valid = 1'b0;
        inf.D = 'bx;
        gap = $urandom_range(1,5);
        repeat(gap) @(negedge clk);
        r_act.randomize();
        inf.act_valid = 1'b1;
        act = r_act.ran_act;
        inf.D = {12'd0, act};
        repeat(1) @(negedge clk);
        inf.act_valid = 1'b0;
        inf.D = 'bx;
        gap = $urandom_range(1,5);
        repeat(gap) @(negedge clk);
        after_act_task;
    end
    else begin
        r_act.randomize();
        inf.act_valid = 1'b1;
        act = r_act.ran_act;
        inf.act_valid = 1'b1; 
        inf.D = {12'd0, act};
        repeat(1) @(negedge clk);
        inf.act_valid = 1'b0;
        inf.D = 'bx;
        gap = $urandom_range(1,5);
        repeat(gap) @(negedge clk);
        after_act_task;
    end
endtask

task after_act_task;
    case (act)
        Buy: begin
            given_item_id;
            gap = $urandom_range(1,5);
            repeat(gap) @(negedge clk);
            given_item_num;
            gap = $urandom_range(1,5);
            repeat(gap) @(negedge clk);
            given_seller_id;
        end
        Check: begin
            check_sell = $urandom_range(0,1);
            if(check_sell == 1'b1) begin
               given_seller_id; 
            end
        end
        Deposit: begin
            r_amt.randomize();
            given_money = r_amt.deposit_amt;
            inf.amnt_valid = 'b1;
            inf.D = {given_money};
            repeat(1) @(negedge clk);
            inf.amnt_valid = 'b0;
            inf.D = 'dx;
        end
        Return: begin
            given_item_id;
            gap = $urandom_range(1,5);
            repeat(gap) @(negedge clk);
            given_item_num;
            gap = $urandom_range(1,5);
            repeat(gap) @(negedge clk);
            given_seller_id;
        end
    endcase
endtask



task given_item_id; 
    r_item_id.randomize();
    item = r_item_id.ran_item_id;
    inf.item_valid = 'b1;
    inf.D = {14'd0, item};
    repeat(1) @(negedge clk);
    inf.item_valid = 'b0;
    inf.D = 'dx;
endtask

task given_item_num; 
    r_num_item.randomize();
    item_num = r_num_item.ran_num_item;
    inf.num_valid = 'b1;
    inf.D = {10'd0, item_num};
    repeat(1) @(negedge clk);
    inf.num_valid = 'b0;
    inf.D = 'dx;
endtask

task given_seller_id; 
    r_seller_id.randomize();
    seller = r_seller_id.ran_seller_id;
    if(seller == user)
        seller = seller + 1;
    else    
        seller = seller;
    inf.id_valid = 'b1;
    inf.D = {8'd0, seller};
    repeat(1) @(negedge clk);
    inf.id_valid = 'b0;
    inf.D = 'dx;
endtask

task reset_task;
    #(1);
    inf.rst_n       = 0;
	inf.D        	= 'bx;    
	inf.act_valid   = 0;
	inf.item_valid  = 0;    
	inf.id_valid    = 0;  
    inf.num_valid   = 0;
    inf.amnt_valid  = 0; 
	cycles          = 0;
    total_cycles    = 0;
    patcount        = 0;
    for(i = 0; i < 256; i = i + 1) begin
        record_act[i] = 0;
        record_buy_id[i] = 0;
        record_sell_id[i] = 0;
    end
    #(15);
	if (inf.out_valid!==0 || inf.err_msg!==0 || inf.complete!==0 || inf.out_info!==0) begin
        fail_task;
        $display("************************************************************");
        $display("*                             FAIL                         *");
        $display("*   Output signal should be 0 after initial RESET at %t    *",$time);
        $display("************************************************************");
        $finish;
    end
    #(5); inf.rst_n =1;
    repeat(2) @(negedge clk);
endtask


task money_task;
    case (act)
        Deposit: begin
            money = given_money;
        end
        Buy: begin
            if(buy_shop_info.level == Platinum)
                d_fee ='d10;
            else if(buy_shop_info.level == Gold)
                d_fee = 'd30;
            else if(buy_shop_info.level == Silver)
                d_fee = 'd50;
            else
                d_fee = 'd70;
//********************************************************************************
            case (item)
                Large: begin
                    money = (item_num * 300);
                end
                Medium: begin
                    money = (item_num * 200);
                end
                Small: begin
                    money = (item_num * 100);
                end
            endcase
        end
        Return: begin
            if(item == Large)
                money = item_num * 300;
            else if(item == Medium)
                money = item_num * 200;
            else
                money = item_num * 100;
        end
    endcase 
endtask

task exp_task;
    if(item == Large)
        buy_exp = item_num * 60;
    else if(item == Medium)
        buy_exp = item_num * 40;
    else
        buy_exp = item_num * 20;
endtask

//record_task
//0 is deposit or check or no_use 1 is buy 2 is return 3 is sell
task record_task;
    case (act)
        Buy:begin
            record_act[user] = 1;
            record_act[seller] = 3;
        end
        Return:begin
            record_act[user] = 2;
        end
        default:begin
            record_act[user] = 0;
        end
    endcase
    //sell-buy
    if(act == Buy) begin
        record_sell_id[user] = seller;
        record_buy_id[seller] = user;
    end
endtask

//golden_err_msg
task golden_err_msg_task;
    money_task;
    exp_task;
    if(act == Buy) begin //Buy
        case (item)
            Large: begin
                if(buy_shop_info.large_num + {1'b0, item_num} > 'd63) begin
                    golden_err_msg = INV_Full;
                end
                else if(sell_shop_info.large_num < item_num) begin
                    golden_err_msg = INV_Not_Enough;
                end
                else if(buy_user_info.money < (money + d_fee)) begin
                    golden_err_msg = Out_of_money;
                end
                else begin
                    golden_err_msg = No_Err;
                end
            end
            Medium: begin
                if(buy_shop_info.medium_num + {1'b0, item_num} > 'd63) begin
                    golden_err_msg = INV_Full;
                end
                else if(sell_shop_info.medium_num < item_num) begin
                    golden_err_msg = INV_Not_Enough;
                end
                else if(buy_user_info.money < (money + d_fee)) begin
                    golden_err_msg = Out_of_money;
                end
                else begin
                    golden_err_msg = No_Err;
                end
            end 
            default: begin
                if(buy_shop_info.small_num + {1'b0, item_num} > 'd63) begin
                    golden_err_msg = INV_Full;
                end
                else if(sell_shop_info.small_num < item_num) begin
                    golden_err_msg = INV_Not_Enough;
                end
                else if(buy_user_info.money < (money + d_fee)) begin
                    golden_err_msg = Out_of_money;
                end
                else begin
                    golden_err_msg = No_Err;
                end
            end 
        endcase
    end
    else if(act == Deposit) begin //Deposit
        if(({1'b0,buy_user_info.money} + money) > 16'hFFFF) begin
            golden_err_msg = Wallet_is_Full;
        end
        else begin
            golden_err_msg = No_Err;
        end
    end
    //0 is deposit or check or no_use 1 is buy 2 is return 3 is sell
    else if(act == Return) begin //return 
        if((record_buy_id[record_sell_id[user]] !== user) || record_act[user] !== 1 || record_act[record_sell_id[user]] !== 3) begin
            golden_err_msg = Wrong_act;
        end
        else if(buy_user_info.shop_history.seller_ID !== seller) begin
            golden_err_msg = Wrong_ID;
        end
        else if(buy_user_info.shop_history.item_num !== item_num) begin
            golden_err_msg = Wrong_Num;
        end
        else if(buy_user_info.shop_history.item_ID !== item) begin
            golden_err_msg = Wrong_Item;
        end
        else begin
            golden_err_msg = No_Err;
        end
    end
    else begin
        golden_err_msg = No_Err;
    end    
endtask



//golden_complete
task golden_complete_task;
    if(golden_err_msg == No_Err) begin
        golden_complete = 1;
    end
    else begin
        golden_complete = 0;
    end
endtask 
//golden_out_info

task golden_out_info_task;
    if(golden_err_msg == No_Err) begin
        if(act == Buy) begin
            golden_out_info = {(buy_user_info.money - money - d_fee),item,item_num,seller};
        end
        else if(act == Check) begin
            if(check_sell == 0) //buy
                golden_out_info = {16'd0, buy_user_info.money};
            else //sell
                golden_out_info = {14'd0, sell_shop_info.large_num, sell_shop_info.medium_num, sell_shop_info.small_num};
        end
        else if(act == Deposit) begin
            golden_out_info = {16'd0, buy_user_info.money + money};
        end
        else begin//return
            if(item == Large)
                golden_out_info = {14'd0, buy_shop_info.large_num - item_num, buy_shop_info.medium_num, buy_shop_info.small_num};
            else if(item == Medium)
                golden_out_info = {14'd0, buy_shop_info.large_num, buy_shop_info.medium_num - item_num, buy_shop_info.small_num};
            else
                golden_out_info = {14'd0, buy_shop_info.large_num, buy_shop_info.medium_num, buy_shop_info.small_num - item_num};
        end
    end
    else begin
        golden_out_info = 0;
    end
endtask

//read_golden_dram
task read_golden_dram_task;
    buy_shop_info = {golden_DRAM[65536+8*user+0], golden_DRAM[65536+8*user+1], golden_DRAM[65536+8*user+2], golden_DRAM[65536+8*user+3]};
    buy_user_info = {golden_DRAM[65536+8*user+4], golden_DRAM[65536+8*user+5], golden_DRAM[65536+8*user+6], golden_DRAM[65536+8*user+7]};
    sell_user_info = {golden_DRAM[65536+8*seller+4], golden_DRAM[65536+8*seller+5], golden_DRAM[65536+8*seller+6], golden_DRAM[65536+8*seller+7]};
    sell_shop_info = {golden_DRAM[65536+8*seller+0], golden_DRAM[65536+8*seller+1], golden_DRAM[65536+8*seller+2], golden_DRAM[65536+8*seller+3]};
endtask

//golden_info
task golden_info_task;
    case (act)
        Buy: begin
            buy_user_info = golden_out_info;
            //*************************************
            //update item_num
            if(item == Large)
                buy_shop_info.large_num = buy_shop_info.large_num + item_num;
            else if(item == Medium)
                buy_shop_info.medium_num = buy_shop_info.medium_num + item_num;
            else
                buy_shop_info.small_num = buy_shop_info.small_num + item_num;
            //update level and exp
            if(buy_shop_info.level == Platinum) begin
                buy_shop_info.exp = buy_shop_info.exp;
            end
            else if(buy_shop_info.level == Gold) begin
                if(buy_shop_info.exp + buy_exp >= 'd4000) begin
                    buy_shop_info.level = Platinum;
                    buy_shop_info.exp = 0;
                end
                else
                    buy_shop_info.exp = buy_shop_info.exp + buy_exp;
            end
            else if(buy_shop_info.level == Silver) begin
                if(buy_shop_info.exp + buy_exp >= 'd2500) begin
                    buy_shop_info.level = Gold;
                    buy_shop_info.exp = 0;
                end
                else
                    buy_shop_info.exp = buy_shop_info.exp + buy_exp;
            end
            else begin
                if(buy_shop_info.exp + buy_exp >= 'd1000) begin
                    buy_shop_info.level = Silver;
                    buy_shop_info.exp = 0;
                end
                else
                    buy_shop_info.exp = buy_shop_info.exp + buy_exp;
            end
            //*****************************************************************
            if({1'b0,sell_user_info.money} + money >= 16'hFFFF)
                sell_user_info.money = 16'hFFFF;
            else
                sell_user_info.money = sell_user_info.money + money;
            //*****************************************************************
            if(item == Large)
                sell_shop_info.large_num = sell_shop_info.large_num - item_num;
            else if(item == Medium)
                sell_shop_info.medium_num = sell_shop_info.medium_num - item_num;
            else
                sell_shop_info.small_num = sell_shop_info.small_num - item_num;
        end
        Deposit: begin
            buy_user_info = {golden_out_info,buy_user_info.shop_history};
        end
        Check: begin
            buy_user_info = buy_user_info;
        end
        Return: begin
            buy_user_info = {buy_user_info.money + money, 16'd0};
            buy_shop_info = {golden_out_info,buy_shop_info.level,buy_shop_info.exp};
            sell_user_info = {sell_user_info.money - money, sell_user_info.shop_history};
            //**********************************************************************
            if(item == Large)
                sell_shop_info.large_num = sell_shop_info.large_num + item_num;
            else if(item == Medium)
                sell_shop_info.medium_num = sell_shop_info.medium_num + item_num;
            else
                sell_shop_info.small_num = sell_shop_info.small_num + item_num;
        end
    endcase
endtask

//write_task
task write_task;
    case (act)
        Buy: begin
            write_buy_task;
            write_sell_task;
        end 
        Deposit: begin
            write_buy_task;
        end
        Return: begin
            write_buy_task;
            write_sell_task;
        end
    endcase
endtask

task write_sell_task;
    golden_DRAM[65536+8*seller+0] = sell_shop_info[31:24];
    golden_DRAM[65536+8*seller+1] = sell_shop_info[23:16];
    golden_DRAM[65536+8*seller+2] = sell_shop_info[15:8];
    golden_DRAM[65536+8*seller+3] = sell_shop_info[7:0];
    golden_DRAM[65536+8*seller+4] = sell_user_info[31:24];
    golden_DRAM[65536+8*seller+5] = sell_user_info[23:16];
    golden_DRAM[65536+8*seller+6] = sell_user_info[15:8];
    golden_DRAM[65536+8*seller+7] = sell_user_info[7:0];
endtask 
task write_buy_task;
    golden_DRAM[65536+8*user+0] = buy_shop_info[31:24];
    golden_DRAM[65536+8*user+1] = buy_shop_info[23:16];
    golden_DRAM[65536+8*user+2] = buy_shop_info[15:8];
    golden_DRAM[65536+8*user+3] = buy_shop_info[7:0];
    golden_DRAM[65536+8*user+4] = buy_user_info[31:24];
    golden_DRAM[65536+8*user+5] = buy_user_info[23:16];
    golden_DRAM[65536+8*user+6] = buy_user_info[15:8];
    golden_DRAM[65536+8*user+7] = buy_user_info[7:0];
endtask //automatic


task wait_out_valid_task;
    cycles = 0;
	while(inf.out_valid !== 1)begin
        cycles = cycles + 1;
        if(cycles > 10000 )begin
            fail_task;
            $display("************************************************************");
			$display("*                             FAIL                         *");
			$display("*             execution latency more than 10000 cycles     *"); 
            $display("************************************************************");
			repeat(4) @(negedge clk);
			//$finish;
		end
	    @(negedge clk);
	end 
endtask

task  check_ans_task;
    cnt_out = 0;
    while (inf.out_valid === 1) begin
        if(cnt_out >= 1) begin
            // $display ("--------------------------------------------------");
			// $display ("                        FAIL                      ");
			// $display ("          Outvalid is more than 1 cycles          ");
			// $display ("--------------------------------------------------");
			// fail_task;
            // @(negedge clk)
			// $finish;
        end
        else begin
            if(inf.complete !== golden_complete || inf.err_msg !== golden_err_msg || inf.out_info !== golden_out_info) begin
                $display("-----------------------------------------------------------");
				$display("                          PATTERM %d                 ", patcount);
				$display("    Golden complete : %d    your complete : %d ", golden_complete, inf.complete);
				$display("    Golden err_msg  : %d    your err_msg  : %d ", golden_err_msg, inf.err_msg);
				$display("    Golden info     : %h  your info     : %8h   ", golden_out_info, inf.out_info);
				$display("-----------------------------------------------------------");
				@(negedge clk);
                fail_task;
				$finish;
            end
            else begin
                total_cycles = total_cycles + cycles;
                $display("\033[0;38;5;111mPASS Pat \033[4m NO.%4d \033[m \033[0;38;5;219mACT %2d\033[m latency: %4d", patcount, act, cycles);
                cycles = 0;
            end
        end
        @(negedge clk);
		cnt_out = cnt_out + 1;
    end
endtask //


task YOU_PASS_task;
    $display("                                                             \033[33m`-                                                                            ");        
    $display("                                                             /NN.                                                                           ");        
    $display("                                                            sMMM+                                                                           ");        
    $display(" .``                                                       sMMMMy                                                                           ");        
    $display(" oNNmhs+:-`                                               oMMMMMh                                                                           ");        
    $display("  /mMMMMMNNd/:-`                                         :+smMMMh                                                                           ");        
    $display("   .sNMMMMMN::://:-`                                    .o--:sNMy                                                                           ");        
    $display("     -yNMMMM:----::/:-.                                 o:----/mo                                                                           ");        
    $display("       -yNMMo--------://:.                             -+------+/                                                                           ");        
    $display("         .omd/::--------://:`                          o-------o.                                                                           ");        
    $display("           `/+o+//::-------:+:`                       .+-------y                                                                            ");        
    $display("              .:+++//::------:+/.---------.`          +:------/+                                                                            ");        
    $display("                 `-/+++/::----:/:::::::::::://:-.     o------:s.          \033[37m:::::----.           -::::.          `-:////:-`     `.:////:-.    \033[33m");        
    $display("                    `.:///+/------------------:::/:- `o-----:/o          \033[37m.NNNNNNNNNNds-       -NNNNNd`       -smNMMMMMMNy   .smNNMMMMMNh    \033[33m");        
    $display("                         :+:----------------------::/:s-----/s.          \033[37m.MMMMo++sdMMMN-     `mMMmMMMs      -NMMMh+///oys  `mMMMdo///oyy    \033[33m");        
    $display("                        :/---------------------------:++:--/++           \033[37m.MMMM.   `mMMMy     yMMM:dMMM/     +MMMM:      `  :MMMM+`     `    \033[33m");        
    $display("                       :/---///:-----------------------::-/+o`           \033[37m.MMMM.   -NMMMo    +MMMs -NMMm.    .mMMMNdo:.     `dMMMNds/-`      \033[33m");        
    $display("                      -+--/dNs-o/------------------------:+o`            \033[37m.MMMMyyyhNMMNy`   -NMMm`  sMMMh     .odNMMMMNd+`   `+dNMMMMNdo.    \033[33m");        
    $display("                     .o---yMMdsdo------------------------:s`             \033[37m.MMMMNmmmdho-    `dMMMdooosMMMM+      `./sdNMMMd.    `.:ohNMMMm-   \033[33m");        
    $display("                    -yo:--/hmmds:----------------//:------o              \033[37m.MMMM:...`       sMMMMMMMMMMMMMN-  ``     `:MMMM+ ``      -NMMMs   \033[33m");        
    $display("                   /yssy----:::-------o+-------/h/-hy:---:+              \033[37m.MMMM.          /MMMN:------hMMMd` +dy+:::/yMMMN- :my+:::/sMMMM/   \033[33m");        
    $display("                  :ysssh:------//////++/-------sMdyNMo---o.              \033[37m.MMMM.         .mMMMs       .NMMMs /NMMMMMMMMmh:  -NMMMMMMMMNh/    \033[33m");        
    $display("                  ossssh:-------ddddmmmds/:----:hmNNh:---o               \033[37m`::::`         .::::`        -:::: `-:/++++/-.     .:/++++/-.      \033[33m");        
    $display("                  /yssyo--------dhhyyhhdmmhy+:---://----+-                                                                                  ");        
    $display("                  `yss+---------hoo++oosydms----------::s    `.....-.                                                                       ");        
    $display("                   :+-----------y+++++++oho--------:+sssy.://:::://+o.                                                                      ");        
    $display("                    //----------y++++++os/--------+yssssy/:--------:/s-                                                                     ");        
    $display("             `..:::::s+//:::----+s+++ooo:--------+yssssy:-----------++                                                                      ");        
    $display("           `://::------::///+/:--+soo+:----------ssssys/---------:o+s.``                                                                    ");        
    $display("          .+:----------------/++/:---------------:sys+----------:o/////////::::-...`                                                        ");        
    $display("          o---------------------oo::----------::/+//---------::o+--------------:/ohdhyo/-.``                                                ");        
    $display("          o---------------------/s+////:----:://:---------::/+h/------------------:oNMMMMNmhs+:.`                                           ");        
    $display("          -+:::::--------------:s+-:::-----------------:://++:s--::------------::://sMMMMMMMMMMNds/`                                        ");        
    $display("           .+++/////////////+++s/:------------------:://+++- :+--////::------/ydmNNMMMMMMMMMMMMMMmo`                                        ");        
    $display("             ./+oo+++oooo++/:---------------------:///++/-   o--:///////::----sNMMMMMMMMMMMMMMMmo.                                          ");        
    $display("                o::::::--------------------------:/+++:`    .o--////////////:--+mMMMMMMMMMMMMmo`                                            ");        
    $display("               :+--------------------------------/so.       +:-:////+++++///++//+mMMMMMMMMMmo`                                              ");        
    $display("              .s----------------------------------+: ````` `s--////o:.-:/+syddmNMMMMMMMMMmo`                                                ");        
    $display("              o:----------------------------------s. :s+/////--//+o-       `-:+shmNNMMMNs.                                                  ");        
    $display("             //-----------------------------------s` .s///:---:/+o.               `-/+o.                                                    ");        
    $display("            .o------------------------------------o.  y///+//:/+o`                                                                          ");        
    $display("            o-------------------------------------:/  o+//s//+++`                                                                           ");        
    $display("           //--------------------------------------s+/o+//s`                                                                                ");        
    $display("          -+---------------------------------------:y++///s                                                                                 ");        
    $display("          o-----------------------------------------oo/+++o                                                                                 ");        
    $display("         `s-----------------------------------------:s   ``                                                                                 ");        
    $display("          o-:::::------------------:::::-------------o.                                                                                     ");        
    $display("          .+//////////::::::://///////////////:::----o`                                                                                     ");        
    $display("          `:soo+///////////+++oooooo+/////////////:-//                                                                                      ");        
    $display("       -/os/--:++/+ooo:::---..:://+ooooo++///////++so-`                                                                                     ");        
    $display("      syyooo+o++//::-                 ``-::/yoooo+/:::+s/.                                                                                  ");        
    $display("       `..``                                `-::::///:++sys:                                                                                ");        
    $display("                                                    `.:::/o+  \033[37m                                                                              ");	
    $display("********************************************************************");
    $display("                        \033[0;38;5;219mCongratulations!\033[m      ");
    $display("                 \033[0;38;5;219mYou have passed all patterns!\033[m");
    $display("                 \033[0;38;5;219mTOTAL LATENCY IS: %d\033[m",total_cycles);    
    $display("********************************************************************");
    $finish;
endtask

task fail_task; 
    $display("*****************************************************************************");      
endtask

endprogram